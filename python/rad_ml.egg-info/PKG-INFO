Metadata-Version: 2.1
Name: rad_ml
Version: 2.0.0
Summary: Radiation-Tolerant Machine Learning Framework
Home-page: https://github.com/r0nlt/Space-Radiation-Tolerant
Author: Rishab Nuguru
Author-email: rishabnuguru@example.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: AGPL v3 license
Classifier: Operating System :: OS Independent
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Topic :: Scientific/Engineering :: Space
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: numpy>=1.19.0
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"

# Radiation-Tolerant Machine Learning Framework (Python)

Python bindings for the Radiation-Tolerant Machine Learning Framework.

## Overview

This package provides Python bindings for the C++ `rad_ml` framework, enabling Python applications to leverage radiation-tolerant machine learning capabilities. The framework is designed to protect machine learning models running in radiation environments, such as space.

## Features

- **Triple Modular Redundancy (TMR)**: Protect variables and data structures from radiation-induced errors
- **Neural Network Protection**: Apply selective hardening to neural network architectures
- **Radiation Simulation**: Test your code against simulated radiation environments
- **Fault Injection**: Validate protection mechanisms through controlled fault injection
- **Mission Simulation**: Model entire mission profiles with varying radiation conditions

## Installation

```bash
pip install rad_ml
```

For development installation:

```bash
git clone https://github.com/r0nlt/Space-Radiation-Tolerant.git
cd Space-Radiation-Tolerant/python
pip install -e .
```

## Requirements

- Python 3.7+
- CMake 3.10+
- C++17 compatible compiler
- NumPy 1.19+

## Quick Start

Here's a simple example of using TMR to protect a variable:

```python
import rad_ml

# Initialize the framework
rad_ml.initialize()

# Create a TMR-protected variable
protected_value = rad_ml.StandardTMR(42)

# Use the protected value
print(f"Protected value: {protected_value.value}")

# Modify the value
protected_value.value = 100

# Check integrity and correct if needed
if not protected_value.check_integrity():
    corrected = protected_value.correct()
    print(f"Value corrected: {corrected}")

# Shutdown the framework
rad_ml.shutdown()
```

## Examples

The package includes several examples:

- `tmr_example.py`: Demonstrates Triple Modular Redundancy for protecting variables
- `neural_network_example.py`: Shows how to protect neural networks from radiation effects

Run examples with:

```bash
python -m rad_ml.examples.tmr_example
```

## License

AGPL v3 license

## Author

Rishab Nuguru

## Citation

If you use this framework in academic or scientific research, please cite:

```
Nuguru, Rishab. (2025). Radiation-Tolerant Machine Learning Framework.
GitHub repository: https://github.com/r0nlt/Space-Radiation-Tolerant
```
